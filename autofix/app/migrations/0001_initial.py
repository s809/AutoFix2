# Generated by Django 4.2.5 on 2023-10-17 13:00

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import phonenumber_field.modelfields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Employee',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('patronymic', models.CharField(max_length=50, verbose_name='Отчество')),
                ('passport_info', models.CharField(max_length=150, verbose_name='Паспортные данные')),
                ('position', models.CharField(choices=[('AD', 'Администратор'), ('WM', 'Менеджер запчастей'), ('SM', 'Менеджер сервиса'), ('ME', 'Механик'), ('CA', 'Кассир')], max_length=2, verbose_name='Должность')),
                ('end_date', models.DateField(blank=True, default=django.utils.timezone.now, verbose_name='Дата увольнения')),
                ('end_reason', models.CharField(blank=True, max_length=150, verbose_name='Причина увольнения')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='RepairOrder',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('deleted_at', models.DateTimeField(blank=True, db_index=True, default=None, editable=False, null=True)),
                ('clientName', models.CharField(max_length=50, verbose_name='Имя клиента')),
                ('clientPhoneNumber', phonenumber_field.modelfields.PhoneNumberField(max_length=128, region='RU', verbose_name='Номер телефона клиента')),
                ('vehicleManufacturer', models.CharField(max_length=50, verbose_name='Производитель автомобиля')),
                ('vehicleModel', models.CharField(max_length=50, verbose_name='Наименование')),
                ('vehicleYear', models.IntegerField(validators=[django.core.validators.MinValueValidator(1900), django.core.validators.MaxValueValidator(2100)], verbose_name='Год выпуска автомобиля')),
                ('startDate', models.DateField(verbose_name='Дата записи')),
                ('finishDate', models.DateField(blank=True, default=django.utils.timezone.now, verbose_name='Дата завершения')),
                ('isCancelled', models.BooleanField(verbose_name='Отменена')),
                ('comments', models.CharField(blank=True, max_length=300, verbose_name='Комментарии')),
                ('acceptedAmount', models.DecimalField(blank=True, decimal_places=2, max_digits=7, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Принятая сумма')),
                ('master', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Мастер')),
            ],
            options={
                'permissions': (('can_undelete', 'Can undelete this object'),),
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Service',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('deleted_at', models.DateTimeField(blank=True, db_index=True, default=None, editable=False, null=True)),
                ('name', models.CharField(max_length=50, verbose_name='Наименование')),
                ('price', models.DecimalField(decimal_places=2, max_digits=7, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Цена')),
            ],
            options={
                'permissions': (('can_undelete', 'Can undelete this object'),),
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='WarehouseItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('deleted_at', models.DateTimeField(blank=True, db_index=True, default=None, editable=False, null=True)),
                ('name', models.CharField(max_length=50, verbose_name='Наименование')),
                ('manufacturer', models.CharField(max_length=50, verbose_name='Поставщик')),
                ('price', models.DecimalField(decimal_places=2, max_digits=7, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Цена')),
            ],
            options={
                'permissions': (('can_undelete', 'Can undelete this object'),),
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='WarehouseProvider',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('deleted_at', models.DateTimeField(blank=True, db_index=True, default=None, editable=False, null=True)),
                ('name', models.CharField(max_length=50, verbose_name='Название')),
                ('contactInfo', models.CharField(max_length=150, verbose_name='Контактная информация')),
            ],
            options={
                'permissions': (('can_undelete', 'Can undelete this object'),),
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='WarehouseUse',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('deleted_at', models.DateTimeField(blank=True, db_index=True, default=None, editable=False, null=True)),
                ('amount', models.IntegerField(validators=[django.core.validators.MinValueValidator(1)], verbose_name='Количество')),
                ('item', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app.warehouseitem', verbose_name='Предмет')),
                ('repair_order', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app.repairorder', verbose_name='Заявка на ремонт')),
            ],
            options={
                'permissions': (('can_undelete', 'Can undelete this object'),),
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='WarehouseRestock',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('deleted_at', models.DateTimeField(blank=True, db_index=True, default=None, editable=False, null=True)),
                ('item', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app.warehouseitem', verbose_name='Предмет')),
                ('provider', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app.warehouseprovider', verbose_name='Поставщик')),
            ],
            options={
                'permissions': (('can_undelete', 'Can undelete this object'),),
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ServiceHistory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('deleted_at', models.DateTimeField(blank=True, db_index=True, default=None, editable=False, null=True)),
                ('startDate', models.DateField(verbose_name='Дата начала')),
                ('finishDate', models.DateField(blank=True, default=django.utils.timezone.now, verbose_name='Дата завершения')),
                ('isCancelled', models.BooleanField(verbose_name='Отменена')),
                ('comments', models.CharField(blank=True, max_length=300, verbose_name='Комментарии')),
                ('repair_order', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app.repairorder', verbose_name='Заявка на ремонт')),
                ('service', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app.service', verbose_name='Услуга')),
            ],
            options={
                'permissions': (('can_undelete', 'Can undelete this object'),),
                'abstract': False,
            },
        ),
    ]
